#pragma kernel Set
#pragma kernel Collision
#pragma kernel Constraint
#pragma kernel Reduce



#define NR_THREADS 128

#include "../Chunks/noise.cginc"
#include "../Chunks/snoise.cginc"
#include "../Chunks/curlNoise.cginc"
#include "../Chunks/interlockedAddFunctions.cginc"


float4x4 transform; 

float _Delta;
float _Time;
uint _Pass;
float _SpringDistance;

uint _NumVertsPerHair;
float _HairLength;

float3 _HandL;
float3 _HandR;

struct Vert{
  float3 pos;
  float3 oPos;
  float3 nor;
  float3 tangent;
  float2 uv;
  float2 debug;
};


struct Base{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 tangent;
  float2 uv;
  float2 debug;
};


RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Base> _BaseBuffer;

uint _VertBuffer_COUNT;
uint _BaseBuffer_COUNT;

float3 getVel( float3 p1 , float3 p2 ){

  float3 v = p1 - p2;

  if( length( v ) > .5){ v = normalize( v ) *.5; }
  return v;
  
}

float3 springForce( float3 p1 , float3 p2 , float sl ){
  float3 dif = p1 - p2;
  float l = length(dif);

  if( l > 0 ){
    float d = l - sl;
    return normalize( dif ) * d;
  }else{
    return float3(0,0,0);
  }

}




[numthreads(NR_THREADS,1,1)]
void Set (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {

  //int pID = id.x + id.y * gridX + id.z * gridX * gridY;

  uint pID = threadID + u3GroupID.x * NR_THREADS;
  uint bID = pID / _NumVertsPerHair;
  if( pID < _VertBuffer_COUNT && bID < _BaseBuffer_COUNT ){


    Vert vert = _VertBuffer[pID];
    Base base = _BaseBuffer[bID];

    float3 bP = mul( transform,  float4(base.pos,1)).xyz;
    float3 bN = normalize(mul( transform,  float4(base.nor,0))).xyz;
    float3 s = mul( transform , float4(1,1,1,0)).xyz;

    float l = float(pID % _NumVertsPerHair ) / float(_NumVertsPerHair);
    vert.pos  = bP + bN * l *(length(s)/3)* _HairLength;
    vert.uv = float2( l , float(bID)/float(_BaseBuffer_COUNT));
    vert.oPos = vert.pos;//base.pos + base.nor * l + _HairLength;

    _VertBuffer[pID] = vert;

  }
  
}



[numthreads(NR_THREADS,1,1)]
void Collision (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {

  //int pID = id.x + id.y * gridX + id.z * gridX * gridY;

  uint pID = threadID + u3GroupID.x * NR_THREADS;
  uint bID = pID / _NumVertsPerHair;
  if( pID < _VertBuffer_COUNT && bID < _BaseBuffer_COUNT ){

    Vert vert = _VertBuffer[pID];
    Base base = _BaseBuffer[bID];

    float3 bP = mul( transform,  float4(base.pos,1)).xyz;
    float3 bN = normalize(mul( transform,  float4(base.nor,0))).xyz;
    float3 s = mul( transform , float4(1,1,1,0)).xyz;

    float3 force = bN * 1.1;//float3( 0 , base.nor , 0.0 );

    force += curlNoise( vert.pos * .4 + float3(0,_Time*.2,0) );
    force += float3(0,1.5,0);


    force += .2*normalize((_HandL-vert.pos))/pow(length(_HandL-vert.pos),4);
    force += .2*normalize((_HandR-vert.pos))/pow(length(_HandR-vert.pos),4);
    // Inertia: objects in motion stay in motion.
    float3 vel = getVel( vert.pos , vert.oPos);

    if( length( force ) > 10 ){
      force = normalize(force) * 10;
    }
 

    bool tb = false;
    // If we are at the bottom, 
    if( vert.uv.x == 0 ){ 
      vert.pos = bP; 
      vert.oPos = bP;
      tb = true;
    }

    if( _Delta  < .1 && tb == false ){

      float dampening = .9;//.99999;// - vert.life * .01;
      float3 next = vert.pos + vel * dampening + force * _Delta * _Delta;

      vert.oPos = vert.pos;
      vert.pos = next;

    }

    _VertBuffer[pID] = vert;

  }
  
}





[numthreads(NR_THREADS,1,1)]
void Constraint(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {
  
  // Get the id using thread / group indices
  uint pID = threadID + u3GroupID.x * NR_THREADS ;

  // Since we are doing 2 passes for verlet, multiply by 2 
  // to get both the vertices!
  pID = pID * 2;
  pID = pID + _Pass;
float3 s = length(mul( transform , float4(1,1,1,0)).xyz)/3;
  if( pID < uint(_VertBuffer_COUNT) ){
    Vert v1 = _VertBuffer[pID];

    float n = sin(1000*float(pID/_NumVertsPerHair)); 

    // If we are are the end of the hair, no need to do verlet
    if( v1.uv.x < 1-(1/ float(_NumVertsPerHair))){
      Vert v2 = _VertBuffer[pID + 1];




      float3 dif = v1.pos - v2.pos;


      float l = length( dif ) * ((4+n)/4);

      float difference = 0;
      
      // We want to make sure that l isn't zero, 
      // or we will get some NaNs
      if( l > 0.001 ){
        difference = ((s*_HairLength/float(_NumVertsPerHair)) - l ) / l;
      }

      // Here is where the actual verlet goes down!
      float3 translate = dif * .6 * difference;
      
      float3 t1 = 1 * translate;
      float3 t2 = 1 * translate;
      
      float3 n1 = v1.pos + t1;
      float3 n2 = v2.pos - t2;


  
      if( v1.uv.x == 0 ){
        v1.pos = v1.pos;
        v2.pos = n2 - t2;
      }else{
        // move towards
        v1.pos = n1;
        v2.pos = n2;
      }
        

              // Set both the values in the proper buffer location!
      _VertBuffer[ pID ] = v1;
      _VertBuffer[ pID + 1 ] = v2;



    }



  }

}



RWStructuredBuffer<float4> _OutBuffer;

[numthreads(NR_THREADS,1,1)]
void Reduce(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {
  
  // Get the id using thread / group indices
  uint pID = threadID + u3GroupID.x * NR_THREADS ;
  resetValue(threadID);



  float4 acc = float4(0,0,0,0);

 if( pID < _VertBuffer_COUNT ){

    Vert vert = _VertBuffer[pID];
    acc.x += saturate( .1 /pow(length(_HandL-vert.pos),4));
    acc.x += saturate( .1 /pow(length(_HandR-vert.pos),4));


  }

    interlockedAddFloat4( acc , threadID );
    
    if( threadID == 0 ){
      _OutBuffer[ u3GroupID.x ] = interlockedFullValue;
    }
}